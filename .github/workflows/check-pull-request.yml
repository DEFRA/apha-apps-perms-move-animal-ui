name: Check Pull Request

on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - edited
      - reopened
      - synchronize
      - ready_for_review

jobs:
  sonarcloud:
    name: SonarCloud Scan
    runs-on: ubuntu-22.04
    env:
      UPLOADER_URL: 'http://localhost:7337'
      FILE_S3_BUCKET: 'apha'
      FILE_S3_PATH: 'biosecurity-map'
      CONSUMER_BUCKETS: 'apha'
      MOCK_VIRUS_SCAN_ENABLED: false
      AWS_REGION: eu-west-2
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      GATEWAY_ID: ${{ secrets.GATEWAY_ID }}
      GATEWAY_PASSWORD: ${{ secrets.GATEWAY_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test code and Create Test Coverage Reports
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - run: |
          npm ci
          npm audit --omit=dev
          npm run build
          npm run format:check
          npm run lint
          npm test

      - name: SonarCloud Scan
        if: github.actor != 'dependabot[bot]'
        uses: SonarSource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  pr-validator:
    name: Run WebdriverIO Journey Tests
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        group: [1, 2, 3, 4] # Number of parallel runners
    env:
      UPLOADER_URL: 'http://localhost:7337'
      FILE_S3_BUCKET: 'apha'
      FILE_S3_PATH: 'biosecurity-map'
      CONSUMER_BUCKETS: 'apha'
      MOCK_VIRUS_SCAN_ENABLED: false
      AWS_REGION: eu-west-2
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      GATEWAY_ID: ${{ secrets.GATEWAY_ID }}
      GATEWAY_PASSWORD: ${{ secrets.GATEWAY_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup journey test dependencies
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - run: |
          npm ci
          npm audit --omit=dev
          npm run build

      - name: Start docker compose
        env:
          NOTIFY_TEMPLATE_ID: ${{ secrets.NOTIFY_TEMPLATE_ID }}
          NOTIFY_API_KEY: ${{ secrets.NOTIFY_API_KEY }}
          NOTIFY_CASE_DELIVERY_EMAIL_ADDRESS: ${{ secrets.NOTIFY_CASE_DELIVERY_EMAIL_ADDRESS }}
          DEFRA_ID_CLIENT_SECRET: ${{ secrets.DEFRA_ID_CLIENT_SECRET }}
        run: |
          docker compose up --wait-timeout 300 -d --quiet-pull

      - name: Run journey tests (split)
        run: |
          node split-specs.js ${{ matrix.group }} 4 > specs.txt
          echo "Running specs for group ${{ matrix.group }}:"
          cat specs.txt
          npx wdio run wdio.conf.js --spec $(cat specs.txt)

      - name: debug
        if: always()
        run: |
          docker compose logs > logs.txt
          docker ps

      - name: Upload allure report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ matrix.group }}
          path: ./allure-report

      - name: Upload docker compose logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose-logs-${{ matrix.group }}
          path: ./logs.txt

      - name: cleanup
        if: always()
        run: docker compose down